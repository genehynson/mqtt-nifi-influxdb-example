### Create Access Token
POST {{baseUrl}}/access/token
Content-Type: application/x-www-form-urlencoded

username=admin
&password=nifipassword

### Get Client ID
GET {{baseUrl}}/flow/client-id
Authorization: Bearer {{token}}

### Get Templates
GET {{baseUrl}}/flow/templates
Authorization: Bearer {{token}}

### Get Process Group
GET {{baseUrl}}/flow/process-groups/{{processGroupFlowId}}
Authorization: Bearer {{token}}

### Create Process Group
POST {{baseUrl}}/process-groups/{{processGroupFlowId}}/process-groups
Authorization: Bearer {{token}}
Content-Type: application/json

{
   "revision":{
      "clientId":"{{clientId}}",
      "version":0
   },
   "component":{
      "name":"My process group",
      "position":{
         "x":647.5,
         "y":-299.5
      }
   }
}

### Create Snippet
POST {{baseUrl}}/snippets
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "snippet": {
    "parentGroupId": "{{processGroupFlowId}}",
    "processors": {},
    "funnels": {},
    "inputPorts": {},
    "outputPorts": {},
    "remoteProcessGroups": {},
    "processGroups": {
       "{{processGroupId}}": {
         "clientId": "{{clientId}}",
         "version": 0
       }
     },
    "connections": {},
    "labels": {}
  }
}

### Create template
POST {{baseUrl}}/process-groups/{{processGroupFlowId}}/templates
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "MQTT-Influx",
  "description": "",
  "snippetId": "{{snippetId}}"
}

### Post template
POST {{baseUrl}}/process-groups/{{processGroupFlowId}}/template-instance
Authorization: Bearer {{token}}
Content-Type: application/json

{
    "originX": "-272.0",
    "originY": "65.0",
    "templateId": "{{newTemplateId}}"
}

### Create ConsumeMQTT processor
POST {{baseUrl}}/process-groups/{{processGroupId}}/processors
Authorization: Bearer {{token}}
Content-Type: application/json

{
   "revision":{
      "clientId":"{{clientId}}",
      "version":0
   },
   "component":{
      "bundle":{
         "artifact":"nifi-mqtt-nar",
         "group":"org.apache.nifi",
         "version":"1.14.0"
      },
      "type":"org.apache.nifi.processors.mqtt.ConsumeMQTT",
      "name":"ConsumeMQTT",
      "position":{
         "x":-232.0,
         "y":-72.0
      }
   }
}

### Create PutInflux Processor
POST {{baseUrl}}/process-groups/{{processGroupId}}/processors
Authorization: Bearer {{token}}
Content-Type: application/json

{
   "revision":{
      "clientId":"{{clientId}}",
      "version":0
   },
   "component":{
      "bundle":{
         "artifact":"nifi-influx-database-nar",
         "group":"org.influxdata.nifi",
         "version":"1.13.0"
      },
      "type":"org.influxdata.nifi.processors.PutInfluxDatabaseRecord_2",
      "name":"PutInfluxDatabaseRecord_2",
      "position":{
         "x":408.0,
         "y":-80.0
      }
   }
}

### Link processors
POST {{baseUrl}}/process-groups/{{processGroupId}}/connections
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "revision": {
    "clientId": "{{clientId}}",
    "version": 0
  },
  "component": {
    "name": "",
    "source": {
      "id": "{{sourceProcessor}}",
      "groupId": "{{processGroupId}}",
      "type": "PROCESSOR"
    },
    "destination": {
      "id": "{{destinationProcessor}}",
      "groupId": "{{processGroupId}}",
      "type": "PROCESSOR"
    },
    "selectedRelationships": [
      "Message"
    ],
    "flowFileExpiration": "0 sec",
    "backPressureDataSizeThreshold": "1 GB",
    "backPressureObjectThreshold": "10000",
    "bends": [],
    "prioritizers": []
  }
}

### Update ConsumeMQTT Processor

PUT {{baseUrl}}/processors/{{sourceProcessor}}
Authorization: Bearer {{token}}
Content-Type: application/json

{
   "revision":{
      "clientId":"{{clientId}}",
      "version":3
   },
   "component":{
      "id":"{{sourceProcessor}}",
      "config":{
         "properties":{
            "Broker URI":"tcp://host.docker.internal:1883",
            "Client ID":"nifi",
            "Topic Filter":"/1",
            "Quality of Service(QoS)":"0",
            "Max Queue Size":"100"
         }
      }
   }
}

### Create RecordReader
POST {{baseUrl}}/process-groups/{{processGroupId}}/controller-services
Authorization: Bearer {{token}}
Content-Type: application/json

{
   "revision":{
      "clientId":"{{clientId}}",
      "version":0
   },
   "disconnectedNodeAcknowledged":false,
   "component":{
      "type":"org.influxdata.nifi.serialization.InfluxLineProtocolReader",
      "bundle":{
         "group":"org.influxdata.nifi",
         "artifact":"nifi-influx-database-nar",
         "version":"1.13.0"
      },
      "name":"InfluxLineProtocolReader"
   }
}

### Update Influx Processor
PUT {{baseUrl}}/processors/{{destinationProcessor}}
Authorization: Bearer {{token}}
Content-Type: application/json

{
   "revision":{
      "clientId":"{{clientId}}",
      "version":25
   },
   "component":{
      "id":"{{destinationProcessor}}",
      "config":{
         "autoTerminatedRelationships":[
            "success",
            "failure",
            "retry"
         ],
         "properties":{
            "influxdb-bucket":"{{influxBucket}}",
            "influxdb-org":"{{influxOrg}}",
            "record-reader":"{{influxRecordReader}}"
         }
      }
   }
}

### Start the RecordReader Controller Service
PUT {{baseUrl}}/controller-services/{{influxRecordReader}}/run-status
Authorization: Bearer {{token}}
Content-Type: application/json

{
   "revision":{
      "clientId":"{{clientId}}",
      "version":2
   },
   "disconnectedNodeAcknowledged":false,
   "state":"ENABLED"
}

### Create InfluxDB Controller Service
POST {{baseUrl}}/process-groups/{{processGroupId}}/controller-services
Authorization: Bearer {{token}}
Content-Type: application/json

{
   "revision":{
      "clientId":"{{clientId}}",
      "version":0
   },
   "disconnectedNodeAcknowledged":false,
   "component":{
      "type":"org.influxdata.nifi.services.StandardInfluxDatabaseService_2",
      "bundle":{
         "group":"org.influxdata.nifi",
         "artifact":"nifi-influx-database-nar",
         "version":"1.13.0"
      },
      "name":"StandardInfluxDatabaseService_2"
   }
}

### Update InfluxDB Controller Service
PUT {{baseUrl}}/controller-services/{{influxControllerService}}
Authorization: Bearer {{token}}
Content-Type: application/json

{
   "revision":{
      "clientId":"{{clientId}}",
      "version":0
   },
   "component":{
      "id": "{{influxControllerService}}",
      "properties": {
         "influxdb-token": "{{influxToken}}",
         "influxdb-url": "{{influxUrl}}"
      }
   }
}

### Update Influx Processor with ControllerService
PUT {{baseUrl}}/processors/{{destinationProcessor}}
Authorization: Bearer {{token}}
Content-Type: application/json

{
   "revision":{
      "clientId":"{{clientId}}",
      "version":40
   },
   "component":{
      "id":"{{destinationProcessor}}",
      "config":{
         "properties":{
           "influxdb-service": "{{influxControllerService}}"
         }
      }
   }
}

### Start the InfluxDB Controller Service
PUT {{baseUrl}}/controller-services/{{influxControllerService}}/run-status
Authorization: Bearer {{token}}
Content-Type: application/json

{
   "revision":{
      "clientId":"{{clientId}}",
      "version":2
   },
   "disconnectedNodeAcknowledged":false,
   "state":"ENABLED"
}

### Start Individual Processor
PUT {{baseUrl}}/processors/{{sourceProcessor}}
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "revision": {
    "clientId": "{{clientId}}",
    "version": 2
  },
  "component": {
    "id": "{{sourceProcessor}}",
    "state": "RUNNING"
  }
}

### Start Entire Process Group Running
PUT {{baseUrl}}/flow/process-groups/{{processGroupId}}
Authorization: Bearer {{token}}
Content-Type: application/json

{
   "id": "{{processGroupId}}",
  "state": "RUNNING"
}

### Stop Entire Process Group Running
PUT {{baseUrl}}/flow/process-groups/{{processGroupId}}
Authorization: Bearer {{token}}
Content-Type: application/json

{
   "id": "{{processGroupId}}",
  "state": "STOPPED"
}
